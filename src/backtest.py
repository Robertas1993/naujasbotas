import sys
import pandas as pd
import numpy as np

print("Running debug_backtest.py")
print("Python:", sys.executable)

# Generate synthetic OHLCV data
np.random.seed(42)
length = 300
dates = pd.date_range(end=pd.Timestamp.utcnow(), periods=length, freq='H')
prices = 1000 + np.cumsum(np.random.normal(0, 1, size=length))
openp = prices
closep = prices + np.random.normal(0, 0.5, size=length)
highp = np.maximum(openp, closep) + np.abs(np.random.normal(0, 0.5, size=length))
lowp = np.minimum(openp, closep) - np.abs(np.random.normal(0, 0.5, size=length))
vol = np.random.randint(1, 100, size=length)

df = pd.DataFrame({
    'open': openp,
    'high': highp,
    'low': lowp,
    'close': closep,
    'volume': vol
}, index=dates)

print("DATA: rows =", len(df))
if len(df) == 0:
    print("No data generated.")
    sys.exit(0)

print("DATA head:")
print(df.head().to_string())
print("DATA tail:")
print(df.tail().to_string())

# Try to import user's strategy.generate_signals, fallback to simple SMA crossover
try:
    from src.strategy import generate_signals
    print("Imported generate_signals from src.strategy")
except Exception as e:
    print("Could not import generate_signals from src.strategy:", e)
    print("Using fallback simple SMA crossover strategy for debug.")
    def generate_signals(df):
        short = df['close'].rolling(window=5, min_periods=1).mean()
        long = df['close'].rolling(window=20, min_periods=1).mean()
        signal = pd.Series(0, index=df.index)
        buy = (short > long) & (short.shift(1) <= long.shift(1))
        sell = (short < long) & (short.shift(1) >= long.shift(1))
        signal[buy] = 1
        signal[sell] = -1
        return signal

# Generate signals
signals = generate_signals(df)
print("Signals type:", type(signals))
try:
    print("Signals value counts:")
    print(signals.value_counts().to_string())
except Exception as e:
    print("Could not print signals value_counts():", e)

nonzero = signals[signals != 0]
print("Non-zero signals count:", len(nonzero))
print("First non-zero signals (up to 50):")
print(nonzero.head(50).to_string())

# Quick trade sim (enter on 1 if flat, exit on -1)
capital = 10000.0
position = 0
entry_price = 0.0
trades = []
for idx, sig in signals.iteritems():
    price = float(df.loc[idx, 'close'])
    if sig == 1 and position == 0:
        position = 1
        entry_price = price
        trades.append({'type': 'buy', 'price': price, 'index': str(idx)})
    elif sig == -1 and position == 1:
        pnl = price - entry_price
        trades.append({'type': 'sell', 'price': price, 'index': str(idx), 'pnl': pnl})
        position = 0

print("Trades found:", len(trades))
if trades:
    for t in trades[:50]:
        print(t)
else:
    print("No trades generated by signals.")